manifest {
    name = 'ScaleMethyl'
    version = '1.0.1'
    description = 'ScaleBio single-cell DNA methylation analysis workflow'
    homePage = 'https://scale.bio'
}
//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
params {
    //// Sequencing data input. Either a runfolder (BCL) or a directory with fastq files is require!
    runFolder = null // Top-level sequencer run directory (null if using fastq input)
    fastqSamplesheet = null // bcl-convert samplesheet.csv required if runFolder is set (null if using fastq input)

    fastqDir = null // Directory with pre-generated fastq files (null if using bcl)

    //// Sample sheet, i.e. path to samples.csv (required!)
    samples = null

    // Can be absolute paths or relative to ${projectDir}/references/ if there are no changes to the indexes
    libStructure = "lib.json"

    // Flag to enable bcl-convert to produce fastq files split by i5
    splitFastq = true

    // Flag to enable bcParser to produce outputs split by TN5
    splitBarcodeParsing = true

    //// Optional workflow parameters
    bclConvertParams = "--no-lane-splitting true" // do not split by lane split by i5 //"--bcl-only-lane 1" // Only use lane 1 

    //// JSON file with paths to reference genome files.
    // One specific genome from there is selected at runtime
    //genomes = "${projectDir}/references/genomes.json"

    //// Reference genome.json (required!)
    genome = null

    // Workflow outputs (sub-directory of workflow launch dir)
    outDir = "ScaleMethyl.out"

    // Reporting only parameters
    resultDir = null    // Directory that points to output of previous analysis run
    reporting = false   // When set to true only generateReport and combinedSampleReport are run

    //// Output options
    fastqOut = false    // set to true to publish demultiplexed fastq files to outDir
    trimOut = false     // set to true to publish trimmed fastq to outDir
    bamOut = true      //  set to true to publish bam files for all reads to outDir
    bamDedupOut = true // set to true to publish deduplicated bam files to outDir
    covOut = true      // set to true to publish sorted cov files per BC

    // Controls whether the matrix generation processes are run or not
    matrixGenerationCH = true
    matrixGenerationCG = true
    
    //// Merge Bam Parameters
    bam1Dir = null
    bam2Dir = null
    bamMergeOut = false
    bamRgHeader = "${projectDir}/references/bam_rg_header.txt"
    ////////////////////////

    //// Optional workflow parameters 
    
    // Enable adapter trimming (if running from Fastq input) and set the (3') adapter
    // When running from BCL (runfolder) the adapter should be included in the samplesheet to
    // be trimmed by bcl-convert during fastq generation
    trimFastq = true
    adapters = "${projectDir}/references/SciMETv2_Adapters.tsv" 
    
    // Run fastQC on all fastq files
    fastqc = true

    // Percentile of unique reads 'minUniqCount' per cell to use as 'robust max'
    topCellPercentile = 99
    // Ratio between transcript counts of top cells and the lower cell threshold
    minCellRatio = 20
    // Minimum counts to consider a barcode as a potential cell
    minUniqCount = 1000

    // Filter barcodes by a range of percent uniquely mapped reads out of total reads 
    minUniqTotal = 1
    maxUniqTotal = 100

    // Compute resources for nextflow, when using local execution
    max_memory = 128.GB
    max_cpus = 32
    max_time = 48.h

    // Optional sc_Dedup parameters
    dedupKey = "Leftmost"
    minMapq = 10

    help = false
}

process {
    cpus = { max_cpu(4) }
    memory = { max_mem(6.GB * task.attempt) }
    time = params.max_time
    container = "public.ecr.aws/o5l3p3e4/scale_methyl:v1.6"

    errorStrategy = 'retry'
    maxRetries = 1
    maxErrors = '-1'

    withName:mergeBam {
        cpus = { max_cpu(4) }
        memory = { max_mem(32.GB * task.attempt) }
    }
    withName:bclconvert {
        container = 'nfcore/bclconvert:3.9.3'
        cpus = { max_cpu(16) }
        memory = { max_mem(64.GB * task.attempt) }
    }
    withName:fastqc {
        container = 'biocontainers/fastqc:v0.11.9_cv8'
        cpus = { max_cpu(4) }
        memory = { max_mem(4.GB * task.attempt) }
    }
    withName:barcodeDemux {
        cpus = { max_cpu(6) }
        memory = { max_mem(8.GB * task.attempt) }
    }
    withName:trim {
	    cpus = { max_cpu(4) }
	    memory = { max_mem(4.GB * task.attempt) }
    }
    withName:align {
        cpus = { max_cpu(10) }
        memory = { max_mem(32.GB * task.attempt) }
    }
    withName:dedup {
        cpus = { max_cpu(4) }
        memory = { max_mem(8.GB * task.attempt) }
    }
    withName:extract {
        cpus = { max_cpu(1) }
        memory = { max_mem(16.GB * task.attempt) }
        time = 10.h
    }
    withName:sortExtractCG{
        cpus = { max_cpu(2) }
        memory = { max_mem(16.GB * task.attempt) }
    }
    withName:sortExtractCH{
        cpus = { max_cpu(2) }
        memory = { max_mem(16.GB * task.attempt) }
    }
    withName:mtxCG {
        cpus = { max_cpu(2) }
        memory = { max_mem(16.GB * task.attempt) }
    }
    withName:mtxCH {
        cpus = { max_cpu(2) }
        memory = { max_mem(16.GB * task.attempt) }
    }
    withLabel:py_process {
        cpus = { max_cpu(1) }
        container = "public.ecr.aws/o5l3p3e4/scale_methyl_python_dependencies:v1.2"
        memory = { max_mem(4.GB * task.attempt) }
    }
    withName:tssEnrich {
        cpus = { max_cpu(2) }
        memory = { max_mem(8.GB * task.attempt)}
        container = "public.ecr.aws/o5l3p3e4/scale_methyl_tss_enrichment:v0.2"
    }
    withName:mergeMtxCG{
        cpus = { max_cpu(2) }
        memory = { max_mem(4.GB * task.attempt) }
    }
    withName:mergeMtxCH{
        cpus = { max_cpu(2) }
        memory = { max_mem(4.GB * task.attempt) }
    }
}

profiles {
  conda {
    conda.enabled = true
    process.conda = "$projectDir/envs/scaleMethyl.conda.yml"
    process {
      withLabel:py_process {
        conda = "$projectDir/envs/scaleMethylPyQc.yml"
      }
      withName:tssEnrich {
        conda = "$projectDir/envs/scaleMethylTssEnrichR.conda.yml"
      }
    }
  }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true 
    docker.enabled = false
  }
}


// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def max_mem(obj) {
    if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
    else
        return obj
}
def max_cpu(obj) {
    return Math.min(obj, params.max_cpus as int)
}
