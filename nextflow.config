manifest {
    name = 'ScaleMethyl'
    version = '1.2.0'
    description = 'ScaleBio single-cell DNA methylation analysis workflow'
    homePage = 'https://scale.bio'
}
//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
params {
    //// Sequencing data input. Either runFolder or fastqDir is require!
    runFolder = null // Top-level sequencer run directory (BCLs); null if using fastq input
    fastqDir = null // Directory with pre-generated fastq files; null if using runFolder input

    //// Sample Barcode Table
    samples = null // Path to samples.csv; required

    //// Reference genome
    genome = null // Path to genome.json; required

    //// Context options
    calculateCH = true // Calculate CH methylation reports/parquet files/matrices

    //// Output options
    outDir = "ScaleMethyl.out" // Output directory for workflow results

    // Optional output files
    covOut = true        // Per-cell methylation coverage in bismark .cov format
    allcOut = true      // Per-cell methylation coverage in .allc format (allcools)
    amethystOut = true  // Per-cell methylation coverage in Amethyst hdf5 cov format
    fastqOut = false     // Sample demultiplexed fastq files
    trimOut = false      // Adapter-trimmed fastq
    bamOut = false       // BAM files for all aligned reads
    bamDedupOut = false   // BAM files with unique (deduplicated) reads
    parquetOut = true // Will publish work files for matrix generation for checkpoint

    //// Matrix Generation options 
    // Generate a matrix with methylation signal per genome bin
    windowMatrixOut = true

    // Genome bin size for matrix generation
    windowTileSizeCG = 50000 // Window size for CG matrix generation; set to null if genomeTiles .bed file set in genome.json; Will create a chrom.sizes file if one is not provided in genome.json
    windowTileSizeCH = 100000 // Window size for CG matrix generation; set to null if genomeTilesCH .bed file set in genome.json; Will create a chrom.sizes file if one is not provided in genome.json
    minimumWindowSize = 200 // Minimum window size after blacklisted regions are removed
    
    //// Library structure definition
    //// Default matches Scale Single-cell Methylation kit v1.0 and v1.1
    libStructure = "lib.json" // absolute path or relative to ${projectDir}/references/

    //// Optional workflow parameters
    // Fastq generation (bcl-convert) options
    fastqSamplesheet = null // custom samplesheet replacing the auto-generated one; optional
    bclConvertParams = "--no-lane-splitting true" // do not split by lane split by i5 //"--bcl-only-lane 1" // Only use lane 1 

    // Checkpoint restore and single step parameters
    previousOutDir = null // Directory that points to output of previous analysis run
    merged = false // Set to true if merging multiple runs, will use resultDir column in samples.csv (see samples.merge.csv in examples for formating) to merge previous runs together (Do not set previousOutDir and merge at the same time).
    startPostAlignment = false // Will start from matrix generation if checkpoint files are present
    reportingOnly = false // When set to true only generateReport and combinedSampleReport are run

    // Controls whether tss enrichment is run
    runTssEnrich = true
    fastqc = true // Run fastQC on all fastq files
    chReadsThreshold = 10 // Percentage threshold for filtering reads with high CH methylation

    // Enable adapter trimming (if running from Fastq input) and set the (3') adapter
    // When running from BCL (runfolder) the adapter should be included in the samplesheet to
    // be trimmed by bcl-convert during fastq generation
    trimFastq = true
    adapters = "${projectDir}/references/SciMETv2_Adapters.tsv"

    // Cell-calling parameters
    topCellPercentile = 99 // Percentile of unique reads 'minUniqCount' per cell to use as 'robust max'
    minCellRatio = 20 // Ratio between transcript counts of top cells and the lower cell threshold
    minUniqCount = 1000 // Minimum counts to consider a barcode as a potential cell
    minUniqTotal = 1 // Filter barcodes by a range of percent uniquely mapped reads out of total reads 
    maxUniqTotal = 100

    // Optional sc_dedup parameters
    dedupKey = "Leftmost"
    minMapq = 10
    // Merge Bam Parameters
    bam1Dir = null
    bam2Dir = null
    bamMergeOut = false
    bamRgHeader = "${projectDir}/references/bam_rg_header.txt"

    //// Compute resources and parallelization
    splitFastq = true // Split fastq files by i5 and TN5 barcodes for increased parallelization
    // Max. resources that can be requested for a single task / process
    maxMemory = 124.GB
    maxCpus = 32
    maxTime = 24.h

    help = false
}

process {
    cpus = { maxCpu(2) }
    memory = { maxMem(4.GB * task.attempt) }
    time = params.maxTime
    container = "public.ecr.aws/o5l3p3e4/scale-methyl-tools@sha256:6fd63db48e8786ed1cfc17d7e3effd3fd696ccb8e5e54803959e2dcd2f794aec"

    // Default errorStrategy is to retry if process exit code is 137, 138, 139 or 140 or if it is the first or second task attempt
    errorStrategy = { (task.attempt) <= 2 || (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    maxRetries = 3
    maxErrors = '-1'

    withLabel:process_single {
        cpus = 1
        memory = { maxMem(2.GB * task.attempt) }
    }
    withLabel:process_medium {
        cpus = { maxCpu(4) }
        memory = { maxMem(6.GB * task.attempt) }
    }
    withLabel:process_medium_memory {
        cpus = { maxCpu(4) }
        memory = { maxMem(12.GB * task.attempt) }
    }
    withName:BclConvert {
        container = 'nfcore/bclconvert:3.9.3'
        cpus = { maxCpu(16) }
        memory = { maxMem(62.GB * task.attempt) }
    }
    withName:MergeBam {
        cpus = { maxCpu(4) }
        memory = { maxMem(32.GB * task.attempt) }
    }
    withName:Trim {
	    cpus = { maxCpu(6) }
	    memory = { maxMem(6.GB * task.attempt) }
    }
    withName:Align {
        cpus = { maxCpu(10) }
        memory = { maxMem(32.GB * task.attempt) }
    }
    withName:Extract {
        cpus = { maxCpu(5) }
        memory = { maxMem(10.GB * task.attempt) }
    }
}

profiles {
  conda {
    conda.enabled = true
    process.conda = "$projectDir/envs/scaleMethylTools.conda.yml"
  }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
    // docker.runOptions = '-u $(id -u):$(id -g)' // Alt. to fixOwnership; match user ID in container to outside
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true 
    docker.enabled = false
  }
}


// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def maxMem(obj) {
    if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
        return params.maxMemory as nextflow.util.MemoryUnit
    else
        return obj
}
def maxCpu(obj) {
    return Math.min(obj, params.maxCpus as int)
}
